// extern crate futures; // [dependencies] futures = "0.1"

// use std::io::BufRead;
// use std::thread;

// use futures::sync::mpsc::{Sender, channel};
// use futures::{Future, Stream, Sink};

// fn main() {
//     let mut worker = Some(spawn_worker());
//
//     let stdin = ::std::io::stdin();
//     for line in stdin.lock().lines() {
//         let line = line.unwrap();
//         if line == "stop" {
//             drop(worker.take());
//             continue;
//         };
//
//         if let Some(w) = worker {
//             worker = Some(w.send(Msg::Echo(line)).wait().unwrap())
//         } else {
//             println!("The worker has been stopped!");
//         }
//     }
//
//     println!("Bye!");
// }
//
// enum Msg {
//     Echo(String),
// }
//
// fn spawn_worker() -> Sender<Msg> {
//     let (tx, rx) = channel(1);
//     thread::spawn(move || {
//         rx.for_each(|msg| {
//             match msg {
//                 Msg::Echo(msg) => println!("{} ❤️ ", msg),
//             }
//             Ok(())
//         }).map(|()| {
//             println!("The worker has stopped!");
//         }).wait().unwrap();
//     });
//     tx
// }

// fn main() {
//     use std::sync::mpsc::sync_channel;
//     use std::thread;
//
//     let (sender, receiver) = sync_channel(1);
//
//     // this returns immediately
//     sender.send(1).unwrap();
//
//     thread::spawn(move|| {
//         // this will block until the previous message has been received
//         sender.send(2).unwrap();
//     });
//
//     let r1 = receiver.recv().unwrap();
//     println!("{:?}", r1);
//
//     let r2 = receiver.recv().unwrap();
//     println!("{:?}", r2);
//
//     assert_eq!(r1, 1);
//     assert_eq!(r2, 2);
// }
use std::thread;
use std::io::BufRead;
// use std::error::Error;
// use std::sync::mpsc::{channel, Sender};
use std::sync::mpsc::{sync_channel, SyncSender};

fn main() {
    let worker = spawn_worker();

    let stdin = ::std::io::stdin();
    for line in stdin.lock().lines() {
        let line = line.unwrap();
        let msg = if line == "stop" {
            Msg::Stop
        } else {
            Msg::Echo(line)
        };
        // worker = worker.send(msg).wait().unwrap();
        worker.send(msg).unwrap();
    }

    println!("Bye!");
}

#[derive(Debug)]
enum Msg {
    Echo(String),
    Stop,
}

fn spawn_worker() -> SyncSender<Msg> {
    let (tx, rx) = sync_channel(1);
    thread::spawn(move || {
        // let _ = rx.for_each(|msg| {
        //     match msg {
        //         Msg::Echo(msg) => {
        //             println!("{} ❤️", msg);
        //             Ok(())
        //         },
        //         Msg::Stop => Err(()),
        //     }
        // }).then(|result| {
        //     println!("The worker has stopped!");
        //     result
        // }).wait();

        for msg in rx {
            println!("{:?} ❤️ ", msg);
        }
        println!("The worker has stopped!");
    });
    tx
}
